#include <iostream>
#define OK 1
#define ERROR 0
#define OVERFLOW -2

using namespace std;

typedef char SElemType;

typedef int Status;

typedef struct StackNode
{
    int data;
    struct StackNode *next;
} StackNode, *LinkStack;

//栈的标准操作
Status InitStack(LinkStack &S);
bool StackEmpty(LinkStack S);
Status Push(LinkStack &S, SElemType e);
Status Pop(LinkStack &S, SElemType &e);
SElemType GetTop(LinkStack &S);

bool In(char ch);
char Precede(char theta1, char theta2);
char Operate(char first, char theta, char second);
char EvaluateExpression(char *);

const char oper[7] = {'+', '-', '*', '/', '(', ')', '#'};

Status InitStack(LinkStack &S)
{
    S->data = -1;
    S->next = NULL;
    return 1;
}

bool StackEmpty(LinkStack S)
{
    if (S->next == NULL)
        return true;
    else
        return false;
}

Status Push(LinkStack &S, SElemType e)
{
    StackNode *tem = new StackNode;
    tem->data = e;
    tem->next = S->next;
    S->next = tem;
    return 1;
}

Status Pop(LinkStack &S, SElemType &e)
{
    if (!StackEmpty(S))
    {
        e = S->next->data;
        S->next = S->next->next;
        return 1;
    }
    else
        return 0;
}

SElemType GetTop(LinkStack &S)
{
    return S->next->data;
}

// char Precede(char theta1, char theta2)
// {
//     if ((theta1 == '(' && theta2 == ')') || (theta1 == '#' && theta2 == '#'))
//         return '=';
//     else if (theta1 == '(' || theta1 == '#' || theta2 == '(' || (theta1 == '+' || theta1 == '-') && (theta2 == '*' || theta2 == '/'))
//         return '<';
//     else
//         return '>';
// }

char Precede(char theta1, char theta2)
{
    if ((theta1 == '+' || theta1 == '-') &&
    (theta2 == '*' || theta2 == '/' || theta2 == '('))return '<';
    if ((theta1 == '+' || theta1 == '-') &&
    (theta2 == '+' || theta2 == '-' || theta2 == ')' || theta2 == '#'))return '>';
    if ((theta1 == '*' || theta1 == '/') && theta2 != '(')return '>';
    if ((theta1 == '*' || theta1 == '/') && theta2 == '(')return '<';
    if (theta1 == '('  && theta2 != ')')return '<';
    if (theta1 == ')')return '>';
    if (theta1 == '#' && theta2 != '#')return '<';
    if (theta1 == '#' && theta2 == '#')return '=';
    return '=';
}

char Operate(char first, char theta, char second)
{
    if (theta == '+')
        return (first - '0' + second - '0') + '0';
    if (theta == '-')
        return (first - second) + '0';
    if (theta == '*')
        return ((first - '0') * (second - '0')) + '0';
    if (theta == '/')
        return ((first - '0') / (second - '0')) + '0';
    return '0';
}

bool In(char ch)
{
    for (int i = 0; i < 7; i++)
        if (ch == oper[i])
            return true;
    return false;
}

char EvaluateExpression(char *s)
{
    LinkStack opnd = new (StackNode);
    LinkStack optr = new (StackNode);
    InitStack(opnd);
    InitStack(optr);
    int i = 1;
    char a;
    while(s[i] != '#')
    {
        if (In(s[i]))
        {
            if (StackEmpty(optr) || (Precede(GetTop(optr),s[i]) == '<'))
            {
                Push(optr,s[i]);
                i++;
            }
            else if ((Precede(GetTop(optr),s[i]) == '>'))
            {
                if (s[i] == ')')
                {
                    char x,y;
                    char yun;
                    Pop(opnd,x);Pop(opnd,y);
                    Pop(optr,yun);
                    Push(opnd,Operate(y,yun,x));
                    while(GetTop(optr) != '(')
                    {
                        Pop(opnd,x);Pop(opnd,y);
                        Pop(optr,yun);
                        Push(opnd,Operate(y,yun,x));
                    }
                    char feiw;
                    Pop(optr,feiw);
                    i++;
                }
                else
                { 
                    char x,y;
                    char yun;
                    Pop(opnd,x);Pop(opnd,y);
                    Pop(optr,yun);
                    Push(opnd,Operate(y,yun,x));
                    Push(optr,s[i]);
                    i++;
                }
                
            }
            else 
            {
                char feiwu;
                Pop(optr,feiwu);
                i++;
            }
        }
        else 
        {
            Push(opnd,s[i]);
            i++;
        }
    }
    while(!StackEmpty(optr))
    {
        char x,y;
        char yun;
        Pop(opnd,x);Pop(opnd,y);
        Pop(optr,yun);
        Push(opnd,Operate(y,yun,x));
    }
    return GetTop(opnd);
}

int main()
{
    int mode;
    cin >> mode;
    char chs[80];
    bool TestOther(int);
    switch (mode)
    {
    case 4:
        cin >> chs;
        cout << EvaluateExpression(chs) - 48 << endl;
        break;
    default:
        // TestOther(mode);
        cout<<1;
    }
    return 0;
}
